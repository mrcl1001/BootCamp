tipo_alquiler_entradas <- table(airbnb$TipoAlquiler)
tipo_alquiler_entradas
ggplot(data=airbnb,aes(x=TipoAlquiler, y=Precio,color=TipoAlquiler))+geom_boxplot()+
scale_color_discrete(name="Alquileres")+ylab("Precio")+xlab("Tipo de Alquiler")
Entire_home_mean <- airbnb$Precio[airbnb$TipoAlquiler=='Entire home/apt']
Private_room_mean <- airbnb$Precio[airbnb$TipoAlquiler=='Private room']
Shared_room_mean <- airbnb$Precio[airbnb$TipoAlquiler=='Shared room']
print(paste("Media de Entire home/apt: ", mean(Entire_home_mean)))
print(paste("Media de Private room: ", mean(Private_room_mean)))
print(paste("Media de Shared room: ", mean(Shared_room_mean)))
print("Como Entire_home_mean y Private_room_mean me salen NA por temas de R tengo que sacarlos de otra forma")
myOwnMean<-function(coll){
m<-0
for (x in coll){
m <- m + x
}
m/length(coll)
}
Entire_home_mean_2 <- airbnb$Precio[airbnb$TipoAlquiler=='Entire home/apt']
Entire_home_mean <- mean(myOwnMean(Entire_home_mean_2[1:1000]))
Private_room_mean_2 <- airbnb$Precio[airbnb$TipoAlquiler=='Private room']
Private_room_mean <- mean(myOwnMean(Private_room_mean_2[1:800]))
print(paste("Media de Entire home/apt: ", Entire_home_mean))
print(paste("Media de Private room: ", Private_room_mean))
print(paste("Media de Shared room: ", mean(Shared_room_mean)))
print("La diferencia que hay es considerable con el primer Tipo de alquiler (Entire home/apt), asi que como me parece estadísticamente significativa voy a aplicar el test de Shapiro para comprobarlo, ya que se considera uno de los tests más fiables")
shapiro.test(rnorm(100, mean=Entire_home_mean, sd=4))
shapiro.test(rnorm(100, mean=Private_room_mean, sd=4))
shapiro.test(rnorm(100, mean=Shared_room_mean, sd=4))
print("Como el p-value de 'Shared_room_mean' sale muy pequeño se rechaza la hipótesis nula, osea que los datos no están en una distribucióbn normal")
airbnb_entire <- filter(airbnb, airbnb$TipoAlquiler=='Entire home/apt')
print("Como en este punto hay una columna que es siempre la misma 'TipoAlquiler', la elimino para que ocupe menos el dataframe")
airbnb_entire <- select(airbnb_entire, -TipoAlquiler)
head(airbnb_entire)
print("He considerado como 'apartamentos enteros' los que son del TipoPropiedad = 'Apartment'")
airbnb_entire_Apartments <- filter(airbnb_entire, airbnb_entire$TipoPropiedad=='Apartment')
airbnb_entire_Apartments <- select(airbnb_entire_Apartments, -TipoPropiedad)
apartment_1 <- distinct(airbnb_entire_Apartments, Barrio)
apartment_1 <- arrange(apartment_1, Barrio)
sort(desc(apartment_1$Total))
apartment_2 <- table(airbnb_entire_Apartments$Barrio)
apartment_3 <- data.frame(apartment_1, Entradas = apartment_2)
apartment_3 <- apartment_3$Entradas.Freq
apartment_1 <- data.frame(apartment_1, Total = apartment_3)
apartment_solucion <- arrange(apartment_1, desc(Total))
head(apartment_solucion ,5)
barrios_precio_medio <- aggregate(Precio ~ Barrio, FUN = mean, data = airbnb_entire_Apartments)
head(barrios_precio_medio[order(desc(barrios_precio_medio$Precio)),],5)
print("Los apartamentos que hay por Barrio son: ")
apartamentos_por_barrio <- airbnb_entire_Apartments %>% count(Barrio)
apartamentos_por_barrio <- merge(apartamentos_por_barrio,barrios_precio_medio,by="Barrio")
newColumnNames <- c("Barrio", "Frecuencia", "Precio_Medio")
colnames(apartamentos_por_barrio) <- newColumnNames
apartamentos_por_barrio <- apartamentos_por_barrio[order(desc(apartamentos_por_barrio$Frecuencia)),]
barrios_mas_precio <- apartamentos_por_barrio[order(desc(apartamentos_por_barrio$Precio_Medio)),]
barrios_mas_precio <- filter(barrios_mas_precio, barrios_mas_precio$Frecuencia > 100)
barrios_mas_precio_5 <- head(barrios_mas_precio, 5)
barrios_mas_precio_5
DiagramasDistribucion <- function(coll){
for (bar in coll){
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio==bar)
ggplot(data=barrio_df_2graf, aes(Precio)) +  geom_density(adjust = 3) + ylab(bar)
}
}
DiagramasDistribucion(barrios_mas_precio_5$Barrio)
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Recoletos')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Goya')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Goya')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Sol')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Sol')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Justicia')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Justicia')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Trafalgar')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Trafalgar')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Recoletos')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Goya')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Goya')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Sol')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Sol')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Justicia')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Justicia')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Trafalgar')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Trafalgar')
airbnb_entire_Apartments %>% count(Barrio)
airbnb_entire_Apartments %>% count(Barrio)
barrios_tamanio_medio <- aggregate(MetrosCuadrados ~ Barrio, FUN = mean, data = airbnb_entire_Apartments, na.rm = TRUE)
barrios_tamanio_medio
barrios_mas_precio_5
barrios_tamanio_medio_merge <- merge(barrios_mas_precio_5, barrios_tamanio_medio, by="Barrio")
barrios_tamanio_medio_merge
tamanios_df_2graf <- filter(barrios_tamanio_medio_merge, barrios_tamanio_medio_merge$Barrio=='Recoletos')
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Recoletos')
tamanios_df_2graf <- filter(barrios_tamanio_medio_merge, barrios_tamanio_medio_merge$Barrio=='Recoletos', na.rm=TRUE)
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Recoletos')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos')
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Recoletos')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos', na.rm= TRUE)
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Recoletos')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos')
tamanios_df_2graf <- filter(tamanios_df_2graf, !isNull(tamanios_df_2graf$MetrosCuadrados))
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos', tamanios_df_2graf$MetrosCuadrados != NA)
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos', airbnb_entire_Apartments$MetrosCuadrados != NA)
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Recoletos')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos', airbnb_entire_Apartments$MetrosCuadrados != NA)
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Recoletos')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos', !is.na(airbnb_entire_Apartments$MetrosCuadrados))
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Recoletos')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Goya', !is.na(airbnb_entire_Apartments$MetrosCuadrados))
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Goya')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Sol', !is.na(airbnb_entire_Apartments$MetrosCuadrados))
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Sol')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Justicia', !is.na(airbnb_entire_Apartments$MetrosCuadrados))
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Justicia')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Trafalgar', !is.na(airbnb_entire_Apartments$MetrosCuadrados))
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Trafalgar')
barrio_sol<-subset(airbnb_entire,Barrio=="Sol")
barrio_sol
barrios_mas_precio_5
barrios_tamanio_medio_merge
barrios_tamanio_medio_merge
barrios_mas_precio_5
ma1<-barrios_mas_precio_5$Precio_Medio[barrios_mas_precio_5$Barrio=='Recoletos']
ma2<-barrios_mas_precio_5$Precio_Medio[barrios_mas_precio_5$Barrio=='Goya']
ma3<-barrios_mas_precio_5$Precio_Medio[barrios_mas_precio_5$Barrio=='Sol']
ma3
ma2
ma<-mean(c(a1,a2,a3))
barrios_tamanio_medio_merge
TukeyHSD(aov( Precio_Medio ~ Barrio, data=barrios_tamanio_medio_merge))
TukeyHSD(aov( value ~ cl, data=barrios_tamanio_medio_merge))
TukeyHSD(aov(Precio_Medio ~ Barrio, data=barrios_tamanio_medio_merge))
barrio_sol
barrio_sol<-subset(airbnb_entire,Barrio=="Sol")
modelo_lineal <- lm(data=barrio_sol, formula=NumDormitorios~MaxOcupantes)
summary(modelo_lineal)
barrio_sol<-subset(airbnb_entire,Barrio=="Sol")
barrio_sol
cor(barrio_sol[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
cor(barrio_sol[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
xx <- filter(barrio_sol, barrio_sol$Barrio=='Trafalgar')
ggplot(data=xx, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Trafalgar')
ggplot(data=barrio_sol, aes(MetrosCuadrados)) + geom_density(adjust = 3))
ggplot(data=barrio_sol, aes(MetrosCuadrados)) + geom_density(adjust = 3)
barrio_sol
ggplot(barrio_sol,aes(x=NumDormitorios,y=MetrosCuadrados,color=MetrosCuadrados)) + geom_point(size=2)
ggplot(barrio_sol,aes(x=NumDormitorios,y=MetrosCuadrados,color=MetrosCuadrados)) + geom_line(size=2)
ggplot(barrio_sol,aes(x=NumDormitorios,y=MetrosCuadrados,color=MetrosCuadrados)) + geom_col(size=2)
ggplot(barrio_sol,aes(y=NumDormitorios,x=MetrosCuadrados,color=MetrosCuadrados)) + geom_col(size=2)
ggplot(barrio_sol,aes(x=MetrosCuadrados, y=NumDormitorios, color=NumDormitorios)) + geom_col(size=10)
ggplot(barrio_sol,aes(x=MetrosCuadrados, y=NumDormitorios, color=NumDormitorios)) + geom_col(size=5)
ggplot(barrio_sol,aes(x=MetrosCuadrados, y=NumDormitorios, color=NumDormitorios)) + geom_col(size=3)
ggplot(barrio_sol,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3)
barrio_sol_filter <- filter(barrio_sol, barrio_sol$NetrosCuadrados > 0, !is.na(barrio_sol$MetrosCuadrados))
barrio_sol_filter <- filter(barrio_sol, barrio_sol$MetrosCuadrados > 0, !is.na(barrio_sol$MetrosCuadrados))
ggplot(barrio_sol_filter,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3)
barrio_sol_filter <- filter(barrio_sol, barrio_sol$MetrosCuadrados > 0, !is.na(barrio_sol$MetrosCuadrados), barrio_sol$NumDormitorios > 0)
ggplot(barrio_sol_filter,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3)
barrio_sol_filter <- filter(barrio_sol, barrio_sol$MetrosCuadrados > 5, !is.na(barrio_sol$MetrosCuadrados), barrio_sol$NumDormitorios > 0)
ggplot(barrio_sol_filter,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3)
barrio_sol_filter <- filter(barrio_sol, barrio_sol$MetrosCuadrados > 10, !is.na(barrio_sol$MetrosCuadrados), barrio_sol$NumDormitorios > 0)
ggplot(barrio_sol_filter,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3)
ggplot(barrio_sol,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3)
barrio_sol_filter <- filter(barrio_sol, barrio_sol$MetrosCuadrados > 10, !is.na(barrio_sol$MetrosCuadrados), barrio_sol$NumDormitorios > 0)
ggplot(barrio_sol_filter,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3)
cor(barrio_sol[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
cor(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
correlacion <- cor(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
correlacion
crv(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
cov(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
cov(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "pairwise.complete.obs")
barrio_sol_filter
cr1 <- cor(barrio_sol_filter$NumDormitorios, barrio_sol_filter$MetrosCuadrados)
cr1
cov(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
cor(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
```python
cov(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
combinacion_valores <- cov(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
combinacion_valores
ggplot(barrio_sol_filter,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3)
ggplot(barrio_sol_filter,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3) +  geom_line(color="blue")
ggplot(barrio_sol_filter,aes(x=MetrosCuadrados, y=NumDormitorios, color=Precio)) + geom_col(size=3)
ggplot(barrio_sol_filter,aes(x=MetrosCuadrados, y=NumDormitorios, color=Precio)) + geom_col(size=5)
ggplot(barrio_sol_filter,aes(y=MetrosCuadrados, x=NumDormitorios, color=Precio)) + geom_col(size=5)
ggplot(barrio_sol_filter,aes(y=MetrosCuadrados, x=NumDormitorios, color=Precio)) + geom_col(size=3)
barrio_sol_filter
barrio_sol_3Dormitorios <- filter(barrio_sol_filter, barrio_sol_filter$NumDormitorios == 3)
barrio_sol_3Dormitorios
total_sol = length(barrio_sol_filter)
total_sol
barrio_sol_filter
barrio_sol_3Dormitorios <- filter(barrio_sol_filter, barrio_sol_filter$NumDormitorios == 3)
probabilidad_sol_3Dormitorios = length(barrio_sol_3Dormitorios)/length(length(barrio_sol_filter)
print(paste("la probabilidad es de: ", probabilidad_sol_3Dormitorios))
barrio_sol_3Dormitorios <- filter(barrio_sol_filter, barrio_sol_filter$NumDormitorios == 3)
probabilidad_sol_3Dormitorios = length(barrio_sol_3Dormitorios)/length(length(barrio_sol_filter)
barrio_sol_3Dormitorios <- filter(barrio_sol_filter, barrio_sol_filter$NumDormitorios == 3)
probabilidad_sol_3Dormitorios = length(barrio_sol_3Dormitorios)/length(length(barrio_sol_filter))
print(paste("la probabilidad es de: ", probabilidad_sol_3Dormitorios))
barrio_sol_3Dormitorios <- filter(barrio_sol_filter, barrio_sol_filter$NumDormitorios == 3)
probabilidad_sol_3Dormitorios = length(barrio_sol_3Dormitorios)/length(length(barrio_sol_filter))
print(paste("la probabilidad es del: ", probabilidad_sol_3Dormitorios, " %"))
barrio_sol_3Dormitorios <- filter(barrio_sol_filter, barrio_sol_filter$NumDormitorios == 3)
probabilidad_sol_3Dormitorios = length(barrio_sol_3Dormitorios)/length(length(barrio_sol_filter))
print(paste("la probabilidad es del: ", probabilidad_sol_3Dormitorios, "%"))
qnorm(probabilidad_sol_3Dormitorios, 0, 1)
qnorm(probabilidad_sol_3Dormitorios, 0, 100)
qnorm(probabilidad_sol_3Dormitorios/100, 0, 1)
madia_precios <- mean(barrio_sol_filter$NumDormitorios)
madia_precios
madia_precios <- mean(barrio_sol_filter$NumDormitorios)
qnorm(probabilidad_sol_3Dormitorios/100, mean = madia_precios, sd = 3)
qnorm(probabilidad_sol_3Dormitorios, mean = madia_precios, sd = 3)
madia_precios <- mean(barrio_sol_filter$NumDormitorios)
qnorm(probabilidad_sol_3Dormitorios/100, mean = madia_precios, sd = 3)
qnorm(probabilidad_sol_3Dormitorios/100, lower.tail = F)
qnorm(probabilidad_sol_3Dormitorios/100, lower.tail = T)
qnorm(probabilidad_sol_3Dormitorios/100, lower.tail = F)
margen_lo <- qnorm(probabilidad_sol_3Dormitorios/100, lower.tail = T)
margen_up <- qnorm(probabilidad_sol_3Dormitorios/100, lower.tail = F)
print(paste("El margen está entre ", margen_lo, " y ", margen_up))
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Recoletos')
DiagramasDistribucion <- function(coll){
for (bar in coll){
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio==bar)
grafica <- ggplot(data=barrio_df_2graf, aes(Precio)) +  geom_density(adjust = 3) + ylab(bar)
print(grafica)
}
}
DiagramasDistribucion(barrios_mas_precio_5$Barrio)
DiagramasDistribucion(barrios_mas_precio_5$Barrio)
margen_lo <- qnorm(probabilidad_sol_3Dormitorios/100, lower.tail = T)
margen_up <- qnorm(probabilidad_sol_3Dormitorios/100, lower.tail = F)
print(paste("El margen está entre ", margen_lo, " y ", margen_up))
apartamentos_por_barrio <- airbnb_entire_Apartments %>% count(Barrio)
apartamentos_por_barrio
apartamentos_por_barrio <- merge(apartamentos_por_barrio,barrios_precio_medio,by="Barrio")
apartamentos_por_barrio
barrios_precio_medio <- aggregate(Precio ~ Barrio, FUN = mean, data = airbnb_entire_Apartments)
head(barrios_precio_medio[order(desc(barrios_precio_medio$Precio)),],5)
apartamentos_por_barrio
apartamentos_por_barrio <- airbnb_entire_Apartments %>% count(Barrio)
apartamentos_por_barrio
cnf_int<-confint(barrio_sol_filter)
cnf_int
install.packages("vcov", lib="C:/Program Files/R/R-4.0.2/library")
cnf_int<-confint(barrio_sol_filter)
cnf_int
barrio_sol_filter
library(vcov)
confint(barrio_sol_filter)
mod1 <- lm(MetrosCuadrados ~ Precio, data=barrio_sol_filter)
mod1
modelo <- lm(MetrosCuadrados ~ Precio, data=barrio_sol_filter)
confint(object=modelo, parm="Precio", level=0.95)
confint_sigma2(object=modelo, level=0.95)
predict(modelo,barrio_sol_filter)
confint(object=modelo, parm="MetrosCuadrados", level=0.95)
predict(modelo,barrio_sol_filter)
modelo <- lm(Precio ~ MetrosCuadrados, data=barrio_sol_filter)
confint(object=modelo, parm="MetrosCuadrados", level=0.95)
predict(modelo,barrio_sol_filter)
modelo <- lm(MetrosCuadrados ~ Precio, data = barrio_sol_filter)
modelo
modelo <- lm(data = barrio_sol_filter, formula= MetrosCuadrados ~ Precio) #lm(MetrosCuadrados ~ Precio, data = barrio_sol_filter)
modelo
sumary(modelo)
summary(modelo)
modelo$coefficients
modelo
xxxx <- confint(object = modelo, parm = "Precio", level = 0.95)
xxxx
intervalo_confianza <- confint(object = modelo, parm = "Precio", level = 0.95)
intervalo_confianza
intervalo_confianza <- confint(object = modelo, parm = "Precio", level = 0.95)
intervalo_confianza
predict(modelo, barrio_sol_filter)
predict(modelo, barrio_sol_filter,interval = 'confidence')
intervalo_confianza <- confint(object = modelo, parm = "Precio", level = 0.95)
intervalo_confianza
predict(modelo, barrio_sol_filter,interval = 'confidence')
barrio_sol_filter
modelo <- lm(data = barrio_sol_filter, formula= MetrosCuadrados ~ Precio)
summary(modelo)
modelo
intervalo_confianza <- confint(object = modelo, parm = "Precio", level = 0.95)
intervalo_confianza
prediccion_confianza <- predict(modelo, barrio_sol_filter,interval = 'confidence')
head(prediccion_confianza)
modelo <- lm(data = barrio_sol_filter, formula= MetrosCuadrados ~ Precio)
summary(modelo)
modelo
intervalo_confianza <- confint(object = modelo, parm = "Precio", level = 0.95)
intervalo_confianza
modelo <- lm(data = barrio_sol_filter, formula= MetrosCuadrados ~ Precio)
summary(modelo)
modelo
intervalo_confianza <- confint(object = modelo, parm = "Precio", level = 0.95)
intervalo_confianza
prediccion_confianza <- predict(modelo, barrio_sol_filter,interval = 'confidence')
head(prediccion_confianza)
print(paste("En torno a los ", modelo$Precio))
modelo$Coeficients$Precio
modelo$Coeficients
modelo <- lm(data = barrio_sol_filter, formula= MetrosCuadrados ~ Precio)
summary(modelo)
modelo
modelo$Coefficients
Coefficients
modelo$Coefficients
modelo <- lm(data = barrio_sol_filter, formula= MetrosCuadrados ~ Precio)
modelo
modelo$Coefficients
modelo$coefficients
modelo$coefficients$Precio
modelo$coefficients[Precio]
modelo$coefficients[0]
incremento_precio <- modelo$coefficients
incremento_precio
print(paste("En torno a los ", incremento_precio$Precio))
print(paste("En torno a los ", incremento_precio))
print(paste("En torno a los ", incremento_precio[1]))
print(paste("En torno a los ", incremento_precio[2]))
print(paste("En torno a los ", modelo$coefficients[2]))
modelo <- lm(data = barrio_sol_filter, formula= MetrosCuadrados ~ Precio)
summary(modelo)
modelo
print(paste("En torno a los ", modelo$coefficients[2]))
modelo1 <- lm(data = barrio_sol_filter, formula= MetrosCuadrados ~ Precio)
summary(modelo1)
modelo1
print(paste("En torno a los ", modelo1$coefficients[2]))
intervalo_confianza <- confint(object = modelo, parm = "Precio", level = 0.95)
intervalo_confianza
prediccion_confianza <- predict(modelo, barrio_sol_filter,interval = 'confidence')
head(prediccion_confianza)
modelo2 <- lm(data = barrio_sol_filter, formula = NumDormitorios ~ Precio)
summary(modelo2)
modelo2
print(paste("En torno a los ", modelo2$coefficients[2]))
library(ggplot2)
library(dplyr)
library(tidyverse)
library(vcov)
options(repr.plot.height=4,repr.plot.width=6)
airbnb<-read.csv('data//airbnb.csv',sep = ',')
head(airbnb, 6)
newnames<-c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")
colnames(airbnb) <- newnames
airbnb <- data.frame(airbnb, MetrosCuadrados = (airbnb$PiesCuadrados*0.092903))
airbnb$CodigoPostal[airbnb$CodigoPostal==''] <- NA
airbnb$CodigoPostal[airbnb$CodigoPostal=='-'] <- NA
airbnb$CodigoPostal[airbnb$CodigoPostal=='28'] <- NA
airbnb$CodigoPostal[substring(airbnb$CodigoPostal,1,2)!='28'] <- NA
airbnb$CodigoPostal[airbnb$CodigoPostal=='2804'] <- '28004'
airbnb$CodigoPostal[airbnb$CodigoPostal=='2805'] <- '28005'
airbnb$CodigoPostal[airbnb$CodigoPostal=='2815'] <- '28015'
airbnb$CodigoPostal <- ifelse(nchar(airbnb$CodigoPostal) > 5, substring(airbnb$CodigoPostal, 0,5), airbnb$CodigoPostal)
airbnb <- filter(airbnb, !is.na(airbnb$CodigoPostal))
ccpp <- distinct(airbnb, CodigoPostal)
ccpp <- arrange(ccpp, CodigoPostal)
print(ccpp)
df_ccpp <- table(airbnb$CodigoPostal)
ccpp2 <- data.frame(ccpp, CCPP = df_ccpp)
ccpp2 <- ccpp2$CCPP.Freq
ccpp <- data.frame(ccpp, Total = ccpp2)
ccpp_max <- arrange(ccpp, desc(Total))
head(ccpp_max, 5)
ccpp_min <- arrange(ccpp, Total)
print(ccpp_min[1:5,])
print(paste0("Tiene ", sum(df_ccpp), " entradas"))
barrios <- filter(airbnb, airbnb$CodigoPostal == "28012")
barrios <- distinct(barrios, Barrio)
barrios
entradas <- filter(airbnb, airbnb$CodigoPostal == "28012")
table(entradas$Barrio)
barrios_totales <- distinct(airbnb, Barrio)
nrow(barrios_totales)
barrios_totales
barrio2 <- distinct(airbnb, Barrio)
barrio2 <- arrange(barrio2, Barrio)
barrios_entradas <- table(airbnb$Barrio)
barrios_entradas2 <- data.frame(barrio2, Entradas = barrios_entradas)
barrios_entradas2 <- barrios_entradas2$Entradas.Freq
barrio2 <- data.frame(barrio2, Total = barrios_entradas2)
barrio2_max <- arrange(barrio2, desc(Total))
head(barrio2_max, 5)
tipo_alquiler <- distinct(airbnb, TipoAlquiler)
nrow(tipo_alquiler)
tipo_alquiler
tipo_alquiler_entradas <- table(airbnb$TipoAlquiler)
tipo_alquiler_entradas
ggplot(data=airbnb,aes(x=TipoAlquiler, y=Precio,color=TipoAlquiler))+geom_boxplot()+
scale_color_discrete(name="Alquileres")+ylab("Precio")+xlab("Tipo de Alquiler")
Entire_home_mean <- airbnb$Precio[airbnb$TipoAlquiler=='Entire home/apt']
Private_room_mean <- airbnb$Precio[airbnb$TipoAlquiler=='Private room']
Shared_room_mean <- airbnb$Precio[airbnb$TipoAlquiler=='Shared room']
print(paste("Media de Entire home/apt: ", mean(Entire_home_mean)))
print(paste("Media de Private room: ", mean(Private_room_mean)))
print(paste("Media de Shared room: ", mean(Shared_room_mean)))
print("Como Entire_home_mean y Private_room_mean me salen NA por temas de R tengo que sacarlos de otra forma")
myOwnMean<-function(coll){
m<-0
for (x in coll){
m <- m + x
}
m/length(coll)
}
Entire_home_mean_2 <- airbnb$Precio[airbnb$TipoAlquiler=='Entire home/apt']
Entire_home_mean <- mean(myOwnMean(Entire_home_mean_2[1:1000]))
Private_room_mean_2 <- airbnb$Precio[airbnb$TipoAlquiler=='Private room']
Private_room_mean <- mean(myOwnMean(Private_room_mean_2[1:800]))
print(paste("Media de Entire home/apt: ", Entire_home_mean))
print(paste("Media de Private room: ", Private_room_mean))
print(paste("Media de Shared room: ", mean(Shared_room_mean)))
print("La diferencia que hay es considerable con el primer Tipo de alquiler (Entire home/apt), asi que como me parece estadísticamente significativa voy a aplicar el test de Shapiro para comprobarlo, ya que se considera uno de los tests más fiables")
shapiro.test(rnorm(100, mean=Entire_home_mean, sd=4))
shapiro.test(rnorm(100, mean=Private_room_mean, sd=4))
shapiro.test(rnorm(100, mean=Shared_room_mean, sd=4))
print("Como el p-value de 'Shared_room_mean' sale muy pequeño se rechaza la hipótesis nula, osea que los datos no están en una distribucióbn normal")
airbnb_entire <- filter(airbnb, airbnb$TipoAlquiler=='Entire home/apt')
print("Como en este punto hay una columna que es siempre la misma 'TipoAlquiler', la elimino para que ocupe menos el dataframe")
airbnb_entire <- select(airbnb_entire, -TipoAlquiler)
head(airbnb_entire)
print("He considerado como 'apartamentos enteros' los que son del TipoPropiedad = 'Apartment'")
airbnb_entire_Apartments <- filter(airbnb_entire, airbnb_entire$TipoPropiedad=='Apartment')
airbnb_entire_Apartments <- select(airbnb_entire_Apartments, -TipoPropiedad)
apartment_1 <- distinct(airbnb_entire_Apartments, Barrio)
apartment_1 <- arrange(apartment_1, Barrio)
sort(desc(apartment_1$Total))
apartment_2 <- table(airbnb_entire_Apartments$Barrio)
apartment_3 <- data.frame(apartment_1, Entradas = apartment_2)
apartment_3 <- apartment_3$Entradas.Freq
apartment_1 <- data.frame(apartment_1, Total = apartment_3)
apartment_solucion <- arrange(apartment_1, desc(Total))
head(apartment_solucion ,5)
barrios_precio_medio <- aggregate(Precio ~ Barrio, FUN = mean, data = airbnb_entire_Apartments)
head(barrios_precio_medio[order(desc(barrios_precio_medio$Precio)),],5)
print("Los apartamentos que hay por Barrio son: ")
apartamentos_por_barrio <- airbnb_entire_Apartments %>% count(Barrio)
apartamentos_por_barrio <- merge(apartamentos_por_barrio,barrios_precio_medio,by="Barrio")
newColumnNames <- c("Barrio", "Frecuencia", "Precio_Medio")
colnames(apartamentos_por_barrio) <- newColumnNames
apartamentos_por_barrio <- apartamentos_por_barrio[order(desc(apartamentos_por_barrio$Frecuencia)),]
barrios_mas_precio <- apartamentos_por_barrio[order(desc(apartamentos_por_barrio$Precio_Medio)),]
barrios_mas_precio <- filter(barrios_mas_precio, barrios_mas_precio$Frecuencia > 100)
barrios_mas_precio_5 <- head(barrios_mas_precio, 5)
barrios_mas_precio_5
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Recoletos')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Goya')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Goya')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Sol')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Sol')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Justicia')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Justicia')
barrio_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Trafalgar')
ggplot(data=barrio_df_2graf, aes(Precio)) + geom_density(adjust = 3) + ylab('Trafalgar')
barrios_tamanio_medio <- aggregate(MetrosCuadrados ~ Barrio, FUN = mean, data = airbnb_entire_Apartments, na.rm = TRUE)
barrios_tamanio_medio_merge <- merge(barrios_mas_precio_5, barrios_tamanio_medio, by="Barrio")
barrios_tamanio_medio_merge
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Recoletos', !is.na(airbnb_entire_Apartments$MetrosCuadrados))
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Recoletos')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Goya', !is.na(airbnb_entire_Apartments$MetrosCuadrados))
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Goya')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Sol', !is.na(airbnb_entire_Apartments$MetrosCuadrados))
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Sol')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Justicia', !is.na(airbnb_entire_Apartments$MetrosCuadrados))
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Justicia')
tamanios_df_2graf <- filter(airbnb_entire_Apartments, airbnb_entire_Apartments$Barrio=='Trafalgar', !is.na(airbnb_entire_Apartments$MetrosCuadrados))
ggplot(data=tamanios_df_2graf, aes(MetrosCuadrados)) + geom_density(adjust = 3) + ylab('Trafalgar')
print("Yo aplicaría el Test de Tukey, ya que lo que busca las medias que son significativamente diferentes")
TukeyHSD(aov(Precio_Medio ~ Barrio, data=barrios_tamanio_medio_merge))
print("Yo aplicaría el Test de Tukey, ya que lo que busca las medias que son significativamente diferentes")
TukeyHSD(aov(Precio_Medio ~ Barrio, data=barrios_tamanio_medio_merge))
barrio_sol<-subset(airbnb_entire,Barrio=="Sol")
modelo_lineal <- lm(data=barrio_sol, formula=NumDormitorios~MaxOcupantes)
summary(modelo_lineal)
cor(barrio_sol[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
print("La lógica dicta que no parecen muy lógicos esos datos, pero también pude ser por unos datos erroneos o un mal cálculo de estos")
ggplot(barrio_sol,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3)
barrio_sol_filter <- filter(barrio_sol, barrio_sol$MetrosCuadrados > 10, !is.na(barrio_sol$MetrosCuadrados), barrio_sol$NumDormitorios > 0)
ggplot(barrio_sol_filter,aes(x=MetrosCuadrados, y=NumDormitorios, color=MetrosCuadrados)) + geom_col(size=3)
correlacion <- cor(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
correlacion
combinacion_valores <- cov(barrio_sol_filter[,c("NumBanyos","NumDormitorios","MaxOcupantes", "MetrosCuadrados")],use = "complete.obs")
combinacion_valores
print("Pienso que es mas fiable el número de habitaciones ya que en la gráfica sale que cuantas mas habitaciones mas caro es el inmueble")
ggplot(barrio_sol_filter,aes(y=MetrosCuadrados, x=NumDormitorios, color=Precio)) + geom_col(size=3)
modelo1 <- lm(data = barrio_sol_filter, formula= MetrosCuadrados ~ Precio)
summary(modelo1)
modelo1
print(paste("En torno a los ", modelo1$coefficients[2]))
intervalo_confianza <- confint(object = modelo, parm = "Precio", level = 0.95)
intervalo_confianza
prediccion_confianza <- predict(modelo, barrio_sol_filter,interval = 'confidence')
head(prediccion_confianza)
modelo2 <- lm(data = barrio_sol_filter, formula = NumDormitorios ~ Precio)
summary(modelo2)
modelo2
print(paste("En torno a los ", modelo2$coefficients[2]))
barrio_sol_3Dormitorios <- filter(barrio_sol_filter, barrio_sol_filter$NumDormitorios == 3)
probabilidad_sol_3Dormitorios = length(barrio_sol_3Dormitorios)/length(length(barrio_sol_filter))
print(paste("la probabilidad es del: ", probabilidad_sol_3Dormitorios, "%"))
margen_lo <- qnorm(probabilidad_sol_3Dormitorios/100, lower.tail = T)
margen_up <- qnorm(probabilidad_sol_3Dormitorios/100, lower.tail = F)
print(paste("El margen está entre ", margen_lo, " y ", margen_up))
